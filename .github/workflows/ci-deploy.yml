name: CI & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      reason:
        description: "Deployment reason"
        required: false
        default: "Manual trigger"

env:
  K6_ENABLED: ${{ vars.K6_ENABLED || 'false' }}
  K6_API_BASE_URL: ${{ vars.K6_API_BASE_URL || '' }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.9.0
          standalone: true
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: |
          pnpm --filter config build
          pnpm --filter domain build
          pnpm --filter lib build

      - name: Generate Prisma client
        run: pnpm --filter api prisma:generate

      - name: Run API tests
        run: pnpm test:api

      - name: Run Driver tests
        run: pnpm test:driver

      - name: Install Playwright browsers
        run: pnpm --dir apps/web exec npx playwright install --with-deps

      - name: Build Web app
        run: pnpm --filter web build

      - name: Run Web E2E tests
        env:
          E2E_BASE_URL: http://127.0.0.1:3001
        run: pnpm --dir apps/web test:e2e

      - name: Setup k6 (optional)
        if: ${{ env.K6_ENABLED == 'true' }}
        uses: grafana/setup-k6-action@v1
        with:
          version: v0.48.0

      - name: Run k6 smoke test (optional)
        if: ${{ env.K6_ENABLED == 'true' }}
        env:
          API_BASE_URL: ${{ env.K6_API_BASE_URL || 'http://localhost:3000/api/v1' }}
          K6_VUS: 5
          K6_DURATION: 30s
        run: k6 run tests/k6/orders-smoke.js

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL || vars.DATABASE_URL || '' }}
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
      RAILWAY_SERVICE_API: ${{ secrets.RAILWAY_SERVICE_API || '' }}
      RAILWAY_SERVICE_WEB: ${{ secrets.RAILWAY_SERVICE_WEB || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.9.0
          standalone: true
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --filter api --filter web --filter config --filter domain --filter lib

      - name: Generate Prisma client
        run: pnpm --filter api prisma:generate

      - name: Run database migrations
        if: ${{ env.DATABASE_URL != '' }}
        run: |
          set -euo pipefail
          db_host="$(node -e "try { const url = new URL(process.env.DATABASE_URL); console.log(url.hostname); } catch (error) { process.exit(0); }")"
          if [ -z "$db_host" ]; then
            echo "Skipping Prisma migrate deploy because DATABASE_URL host is not available."
            exit 0
          fi
          case "$db_host" in
            *.internal)
              echo "Skipping Prisma migrate deploy because database host '$db_host' is not reachable from GitHub runners."
              exit 0
              ;;
          esac
          pnpm --filter api prisma migrate deploy

      - name: Skip database migrations (DATABASE_URL missing)
        if: ${{ env.DATABASE_URL == '' }}
        run: echo "Skipping Prisma migrate deploy because DATABASE_URL is not configured."

      - name: Build production artifacts
        run: |
          pnpm --filter config build
          pnpm --filter domain build
          pnpm --filter lib build
          pnpm --filter api build
          pnpm --filter web build

      - name: Bundle API deployment artifact
        run: |
          rm -rf .railway/api
          pnpm --filter api deploy --prod .railway/api
          cp infra/docker/api.Dockerfile .railway/api/Dockerfile
          cat <<'JSON' > .railway/api/railway.json
          {
            "$schema": "https://railway.com/railway.schema.json",
            "build": {
              "builder": "DOCKERFILE",
              "dockerfilePath": "Dockerfile"
            },
            "deploy": {
              "startCommand": "node dist/index.js"
            }
          }
JSON

      - name: Bundle Web deployment artifact
        run: |
          rm -rf .railway/web
          pnpm --filter web deploy --prod .railway/web
          cp infra/docker/web.Dockerfile .railway/web/Dockerfile
          cat <<'JSON' > .railway/web/railway.json
          {
            "$schema": "https://railway.com/railway.schema.json",
            "build": {
              "builder": "DOCKERFILE",
              "dockerfilePath": "Dockerfile"
            },
            "deploy": {
              "startCommand": "node node_modules/next/dist/bin/next start -p 3000"
            }
          }
JSON

      - name: Verify Railway token
        if: ${{ env.RAILWAY_TOKEN != '' }}
        run: |
          if [ -z "${RAILWAY_TOKEN}" ]; then
            echo "RAILWAY_TOKEN is empty" >&2
            exit 1
          fi
          echo "RAILWAY_TOKEN length: ${#RAILWAY_TOKEN}"

      - name: Deploy API service to Railway
        if: ${{ env.RAILWAY_TOKEN != '' }}
        run: |
          set -euo pipefail
          SERVICE_NAME="${RAILWAY_SERVICE_API:-api}"
          docker run --rm \
            -e RAILWAY_TOKEN="$RAILWAY_TOKEN" \
            -e RAILWAY_API_TOKEN="$RAILWAY_TOKEN" \
            -e RAILWAY_PROJECT_ID="$RAILWAY_PROJECT_ID" \
            -e RAILWAY_ENVIRONMENT_ID="$RAILWAY_ENVIRONMENT_ID" \
            -v "$PWD":/app \
            -w /app \
            ghcr.io/railwayapp/cli:latest \
            railway up .railway/api --service "$SERVICE_NAME" --ci --path-as-root

      - name: Deploy Web service to Railway
        if: ${{ env.RAILWAY_TOKEN != '' }}
        run: |
          set -euo pipefail
          SERVICE_NAME="${RAILWAY_SERVICE_WEB:-web}"
          docker run --rm \
            -e RAILWAY_TOKEN="$RAILWAY_TOKEN" \
            -e RAILWAY_API_TOKEN="$RAILWAY_TOKEN" \
            -e RAILWAY_PROJECT_ID="$RAILWAY_PROJECT_ID" \
            -e RAILWAY_ENVIRONMENT_ID="$RAILWAY_ENVIRONMENT_ID" \
            -v "$PWD":/app \
            -w /app \
            ghcr.io/railwayapp/cli:latest \
            railway up .railway/web --service "$SERVICE_NAME" --ci --path-as-root
