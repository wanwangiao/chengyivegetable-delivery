<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>基本資料管理 - 後台管理系統</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2d5a3d;
            --accent-color: #7cb342;
            --bg-light: #f8f9fa;
            --border-light: rgba(0,0,0,0.125);
        }

        body {
            background: var(--bg-light);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .navbar {
            background: linear-gradient(135deg, var(--primary-color), #1e3d2a);
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }

        .main-container {
            margin-top: 2rem;
        }

        .settings-card {
            border: none;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            margin-bottom: 2rem;
            overflow: hidden;
        }

        .settings-card-header {
            background: linear-gradient(135deg, var(--accent-color), #8bc34a);
            color: white;
            padding: 1.5rem;
            border: none;
        }

        .settings-card-header h5 {
            margin: 0;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .settings-group {
            padding: 2rem;
        }

        .setting-item {
            background: white;
            border: 2px solid #f0f0f0;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
        }

        .setting-item:hover {
            border-color: var(--accent-color);
            box-shadow: 0 4px 15px rgba(124, 179, 66, 0.1);
        }

        .setting-label {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .setting-description {
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 1rem;
        }

        .color-input-wrapper {
            position: relative;
            display: inline-block;
        }

        .color-input {
            width: 60px;
            height: 40px;
            border: 2px solid #ddd;
            border-radius: 8px;
            cursor: pointer;
            margin-right: 1rem;
        }

        .color-preview {
            display: inline-block;
            width: 30px;
            height: 30px;
            border-radius: 6px;
            border: 2px solid #ddd;
            margin-left: 0.5rem;
            vertical-align: middle;
        }

        .form-control, .form-select {
            border-radius: 8px;
            border: 2px solid #e9ecef;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(124, 179, 66, 0.25);
        }

        .btn-primary {
            background: var(--accent-color);
            border-color: var(--accent-color);
            border-radius: 10px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: #6da632;
            border-color: #6da632;
            transform: translateY(-2px);
        }

        .btn-outline-secondary {
            border-radius: 10px;
            padding: 0.75rem 2rem;
            font-weight: 600;
        }

        .btn-danger {
            border-radius: 10px;
            padding: 0.5rem 1rem;
        }

        .multiselect-container {
            max-height: 200px;
            overflow-y: auto;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 0.75rem;
            background-color: #fff;
        }

        .multiselect-container .form-check {
            margin-bottom: 0.5rem;
        }

        .multiselect-container .form-check:last-child {
            margin-bottom: 0;
        }

        .time-slots-container {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 1rem;
            background-color: #f8f9fa;
        }

        .time-slot-item {
            background: white;
            padding: 0.75rem;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .time-slots-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .district-selector-container {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 1.5rem;
            background-color: #f8f9fa;
        }

        .selected-districts {
            background: white;
            padding: 1rem;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .selected-list {
            min-height: 50px;
            display: flex;
            flex-wrap: wrap;
            align-items: flex-start;
        }

        .selected-list:empty::after {
            content: '尚未選擇任何服務區域';
            color: #6c757d;
            font-style: italic;
        }

        .add-district {
            background: white;
            padding: 1rem;
            border-radius: 6px;
            border: 1px solid #dee2e6;
            margin-top: 1rem;
        }

        .badge {
            font-size: 0.9em;
            padding: 0.5em 0.75em;
        }

        .btn-close-white {
            filter: invert(1);
            opacity: 0.8;
        }

        .btn-close-white:hover {
            opacity: 1;
        }

        .preview-section {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            border: 2px dashed #dee2e6;
        }

        .preview-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
        }

        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .category-tabs {
            border-bottom: 2px solid #e9ecef;
            margin-bottom: 2rem;
        }

        .category-tab {
            background: none;
            border: none;
            padding: 1rem 2rem;
            font-weight: 600;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .category-tab.active {
            color: var(--accent-color);
            border-bottom-color: var(--accent-color);
        }

        .category-tab:hover {
            color: var(--accent-color);
            background: rgba(124, 179, 66, 0.05);
        }

        .actions-bar {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: center;
        }

        /* 配送區域管理樣式 */
        .delivery-areas-grid {
            max-height: 600px;
            overflow-y: auto;
            padding-right: 10px;
        }

        .city-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .city-card:hover {
            border-color: var(--accent-color);
            box-shadow: 0 4px 15px rgba(124, 179, 66, 0.1);
        }

        .city-header {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 1rem;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .city-header:hover {
            background: linear-gradient(135deg, var(--accent-color), #8bc34a);
            color: white;
        }

        .city-name {
            font-weight: 600;
            color: var(--primary-color);
        }

        .city-header:hover .city-name {
            color: white;
        }

        .toggle-icon {
            transition: transform 0.3s ease;
        }

        .districts-grid {
            padding: 1rem;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 0.75rem;
            background: #fafafa;
        }

        .district-item {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 0.5rem 0.75rem;
            transition: all 0.2s ease;
        }

        .district-item:hover {
            border-color: var(--accent-color);
            background: rgba(124, 179, 66, 0.05);
        }

        .district-checkbox:checked + label {
            color: var(--accent-color);
            font-weight: 600;
        }
    </style>
</head>
<body>
    <!-- 導航欄 -->
    <nav class="navbar navbar-expand-lg">
        <div class="container-fluid">
            <a class="navbar-brand text-white fw-bold" href="/admin/dashboard">
                <i class="fas fa-cog"></i> 基本資料管理
            </a>
            <div class="navbar-nav ms-auto">
                <a class="nav-link text-white" href="/admin/dashboard">
                    <i class="fas fa-arrow-left"></i> 返回後台
                </a>
            </div>
        </div>
    </nav>

    <div class="container-fluid main-container">
        <div class="row">
            <div class="col-12">
                <!-- 操作欄 -->
                <div class="actions-bar">
                    <h4 class="mb-0">
                        <i class="fas fa-palette"></i> 系統設定管理
                    </h4>
                    <div class="ms-auto d-flex gap-2">
                        <button type="button" class="btn btn-outline-secondary" onclick="previewChanges()">
                            <i class="fas fa-eye"></i> 預覽效果
                        </button>
                        <button type="button" class="btn btn-danger" onclick="resetToDefaults()">
                            <i class="fas fa-undo"></i> 重設預設值
                        </button>
                        <button type="button" class="btn btn-primary" onclick="saveAllSettings()">
                            <i class="fas fa-save"></i> 儲存設定
                        </button>
                    </div>
                </div>

                <!-- 分類標籤 -->
                <div class="category-tabs" id="category-tabs">
                    <!-- 動態生成 -->
                </div>

                <!-- 設定內容 -->
                <div id="settings-content">
                    <!-- 動態生成 -->
                </div>
            </div>
        </div>
    </div>

    <!-- Toast 通知 -->
    <div class="toast-container">
        <div id="notification-toast" class="toast" role="alert">
            <div class="toast-header">
                <strong class="me-auto">系統通知</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body"></div>
        </div>
    </div>

    <!-- 預覽模態窗口 -->
    <div class="modal fade" id="previewModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">設定預覽</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="preview-content">
                    <!-- 預覽內容 -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 全域變數
        let currentSettings = {};
        let allCategories = {};
        let activeCategory = 'notifications';

        // 頁面初始化
        document.addEventListener('DOMContentLoaded', function() {
            loadSettings();
        });

        // 載入設定
        async function loadSettings() {
            console.log('🔄 開始載入設定...');
            
            // 顯示載入狀態
            document.getElementById('settings-content').innerHTML = '<div class="text-center p-5"><div class="spinner-border text-success" role="status"><span class="visually-hidden">載入中...</span></div><p class="mt-3">正在載入設定...</p></div>';
            
            try {
                console.log('📡 正在發送API請求...');
                const response = await fetch('/api/admin/basic-settings');
                console.log('📊 API回應狀態:', response.status, response.statusText);
                
                if (!response.ok) {
                    throw new Error(`API回應錯誤: ${response.status} ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('📋 收到的資料:', data);

                if (data.success) {
                    console.log('✅ 設定載入成功');
                    currentSettings = data.settings;
                    allCategories = data.categories;
                    
                    console.log('📂 分類數量:', Object.keys(allCategories).length);
                    console.log('📂 分類列表:', Object.keys(allCategories));
                    
                    // 手動添加系統監控分類 (不需要後端設定)
                    allCategories['system_monitor'] = [];
                    console.log('📊 添加系統監控分類後，總分類數:', Object.keys(allCategories).length);
                    
                    renderCategoryTabs();
                    renderSettings();
                } else {
                    console.error('❌ 載入設定失敗:', data.message);
                    document.getElementById('settings-content').innerHTML = '<div class="alert alert-danger">載入設定失敗: ' + data.message + '</div>';
                    showNotification('載入設定失敗: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('❌ 載入設定錯誤:', error);
                document.getElementById('settings-content').innerHTML = '<div class="alert alert-danger">載入設定時發生錯誤: ' + error.message + '</div>';
                showNotification('載入設定時發生錯誤: ' + error.message, 'error');
            }
        }

        // 渲染分類標籤
        function renderCategoryTabs() {
            console.log('🏷️ 開始渲染分類標籤...');
            
            const tabsContainer = document.getElementById('category-tabs');
            if (!tabsContainer) {
                console.error('❌ 找不到 category-tabs 元素');
                return;
            }
            
            const categoryNames = {
                'notifications': '📢 通知訊息',
                'theme': '🎨 主題色彩',
                'theme_advanced': '🎯 進階主題',
                'business': '💰 營業設定',
                'service': '📍 服務設定',
                'store': '🏪 商店資訊',
                'content': '📋 頁面內容',
                'features': '🎯 功能開關',
                'delivery_areas': '🗺️ 配送區域',
                'mobile': '📱 移動端設定',
                'system_monitor': '📊 系統監控'
            };

            console.log('📋 可用分類:', Object.keys(allCategories));
            
            let tabsHtml = '';
            Object.keys(allCategories).forEach(category => {
                const displayName = categoryNames[category] || category;
                const isActive = category === activeCategory ? 'active' : '';
                console.log(`🔹 生成標籤: ${category} => ${displayName} (${isActive ? '啟用' : '未啟用'})`);
                tabsHtml += `
                    <button class="category-tab ${isActive}" onclick="switchCategory('${category}')">
                        ${displayName}
                    </button>
                `;
            });

            console.log('📝 生成的HTML長度:', tabsHtml.length);
            tabsContainer.innerHTML = tabsHtml;
            console.log('✅ 分類標籤渲染完成');
        }

        // 切換分類
        function switchCategory(category) {
            activeCategory = category;
            renderCategoryTabs();
            renderSettings();
        }

        // 渲染設定項目
        function renderSettings() {
            const contentContainer = document.getElementById('settings-content');
            
            // 配送區域管理需要特殊處理
            if (activeCategory === 'delivery_areas') {
                renderDeliveryAreasSettings();
                return;
            }
            
            // 系統監控需要特殊處理
            if (activeCategory === 'system_monitor') {
                renderSystemMonitorSettings();
                return;
            }
            
            const categorySettings = allCategories[activeCategory] || [];

            let settingsHtml = `
                <div class="settings-card">
                    <div class="settings-card-header">
                        <h5>${getCategoryDisplayName(activeCategory)}</h5>
                    </div>
                    <div class="settings-group">
            `;

            categorySettings.forEach(setting => {
                settingsHtml += renderSettingItem(setting);
            });

            settingsHtml += `
                    </div>
                </div>
            `;

            contentContainer.innerHTML = settingsHtml;
        }

        // 渲染單個設定項目
        function renderSettingItem(setting) {
            const inputHtml = generateInputHtml(setting);
            
            return `
                <div class="setting-item">
                    <div class="setting-label">
                        <span>${setting.display_name}</span>
                        <small class="text-muted">${setting.key}</small>
                    </div>
                    <div class="setting-description">${setting.description}</div>
                    ${inputHtml}
                </div>
            `;
        }

        // 生成輸入控件HTML
        function generateInputHtml(setting) {
            switch (setting.type) {
                case 'color':
                    return `
                        <div class="color-input-wrapper">
                            <input type="color" 
                                   class="color-input" 
                                   id="setting_${setting.key}" 
                                   value="${setting.value}" 
                                   onchange="updateSetting('${setting.key}', this.value)">
                            <input type="text" 
                                   class="form-control d-inline-block" 
                                   style="width: 200px;" 
                                   value="${setting.value}" 
                                   onchange="updateSetting('${setting.key}', this.value)"
                                   placeholder="例如: #7cb342">
                            <span class="color-preview" style="background-color: ${setting.value}"></span>
                        </div>
                    `;
                
                case 'number':
                    return `
                        <input type="number" 
                               class="form-control" 
                               id="setting_${setting.key}" 
                               value="${setting.value}" 
                               onchange="updateSetting('${setting.key}', this.value)"
                               min="0" 
                               step="1">
                    `;
                
                case 'boolean':
                    return `
                        <div class="form-check form-switch">
                            <input type="checkbox" 
                                   class="form-check-input" 
                                   id="setting_${setting.key}" 
                                   ${setting.value ? 'checked' : ''} 
                                   onchange="updateSetting('${setting.key}', this.checked)">
                            <label class="form-check-label" for="setting_${setting.key}">
                                ${setting.value ? '已啟用' : '已停用'}
                            </label>
                        </div>
                    `;
                
                case 'textarea':
                    return `
                        <textarea class="form-control" 
                                  id="setting_${setting.key}" 
                                  rows="4" 
                                  onchange="updateSetting('${setting.key}', this.value)"
                                  placeholder="輸入內容...">${setting.value}</textarea>
                    `;
                
                case 'time':
                    return `
                        <input type="time" 
                               class="form-control" 
                               id="setting_${setting.key}" 
                               value="${setting.value}" 
                               onchange="updateSetting('${setting.key}', this.value)">
                    `;
                
                case 'multiselect':
                    const selectedValues = Array.isArray(setting.value) ? setting.value : [];
                    let multiselectHtml = '<div class="multiselect-container">';
                    
                    setting.options.forEach(option => {
                        const isChecked = selectedValues.includes(option);
                        multiselectHtml += `
                            <div class="form-check">
                                <input class="form-check-input" 
                                       type="checkbox" 
                                       id="${setting.key}_${option}" 
                                       value="${option}"
                                       ${isChecked ? 'checked' : ''}
                                       onchange="updateMultiSelectSetting('${setting.key}', '${option}', this.checked)">
                                <label class="form-check-label" for="${setting.key}_${option}">
                                    ${option}
                                </label>
                            </div>
                        `;
                    });
                    
                    multiselectHtml += '</div>';
                    return multiselectHtml;

                case 'district_selector':
                    const selectedDistricts = Array.isArray(setting.value) ? setting.value : [];
                    let districtHtml = `
                        <div class="district-selector-container">
                            <div class="selected-districts mb-3">
                                <h6>已選擇的服務區域：</h6>
                                <div id="selectedDistrictsList_${setting.key}" class="selected-list">
                    `;
                    
                    selectedDistricts.forEach((item, index) => {
                        districtHtml += `
                            <span class="badge bg-success me-2 mb-2">
                                ${item.city} ${item.district}
                                <button type="button" class="btn-close btn-close-white ms-1" 
                                        onclick="removeDistrict('${setting.key}', ${index})"></button>
                            </span>
                        `;
                    });
                    
                    districtHtml += `
                                </div>
                            </div>
                            <div class="add-district">
                                <h6>新增服務區域：</h6>
                                <div class="row">
                                    <div class="col-md-5">
                                        <select class="form-select" id="citySelect_${setting.key}" 
                                                onchange="updateDistrictOptions('${setting.key}')">
                                            <option value="">選擇縣市</option>
                    `;
                    
                    Object.keys(setting.areas).forEach(city => {
                        districtHtml += `<option value="${city}">${city}</option>`;
                    });
                    
                    districtHtml += `
                                        </select>
                                    </div>
                                    <div class="col-md-5">
                                        <select class="form-select" id="districtSelect_${setting.key}" disabled>
                                            <option value="">請先選擇縣市</option>
                                        </select>
                                    </div>
                                    <div class="col-md-2">
                                        <button type="button" class="btn btn-outline-primary" 
                                                onclick="addDistrict('${setting.key}')">新增</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    return districtHtml;
                
                case 'time_slots':
                    const timeSlots = Array.isArray(setting.value) ? setting.value : [];
                    let timeSlotsHtml = `
                        <div class="time-slots-container">
                            <div class="time-slots-list" id="timeSlotsList_${setting.key}">
                    `;
                    
                    timeSlots.forEach((slot, index) => {
                        timeSlotsHtml += `
                            <div class="time-slot-item d-flex align-items-center mb-2">
                                <input type="time" class="form-control me-2" style="width: 120px;" 
                                       value="${slot.start || ''}" 
                                       onchange="updateTimeSlot('${setting.key}', ${index}, 'start', this.value)">
                                <span class="me-2">至</span>
                                <input type="time" class="form-control me-2" style="width: 120px;" 
                                       value="${slot.end || ''}" 
                                       onchange="updateTimeSlot('${setting.key}', ${index}, 'end', this.value)">
                                <input type="text" class="form-control me-2" style="width: 150px;" 
                                       placeholder="時段名稱" 
                                       value="${slot.label || ''}"
                                       onchange="updateTimeSlot('${setting.key}', ${index}, 'label', this.value)">
                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                        onclick="removeTimeSlot('${setting.key}', ${index})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        `;
                    });
                    
                    timeSlotsHtml += `
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-primary mt-2" 
                                    onclick="addTimeSlot('${setting.key}')">
                                <i class="fas fa-plus"></i> 新增時段
                            </button>
                        </div>
                    `;
                    return timeSlotsHtml;
                
                default: // text, string 等
                    return `
                        <input type="text" 
                               class="form-control" 
                               id="setting_${setting.key}" 
                               value="${setting.value}" 
                               onchange="updateSetting('${setting.key}', this.value)"
                               placeholder="輸入${setting.display_name}...">
                    `;
            }
        }

        // 取得分類顯示名稱
        function getCategoryDisplayName(category) {
            const names = {
                'notifications': '📢 通知訊息設定',
                'theme': '🎨 主題色彩設定',
                'theme_advanced': '🎯 進階主題設定',
                'business': '💰 營業參數設定',
                'service': '📍 服務範圍設定',
                'store': '🏪 商店基本資訊',
                'content': '📋 頁面內容管理',
                'features': '🎯 功能開關設定',
                'delivery_areas': '🗺️ 配送區域管理',
                'mobile': '📱 移動端參數設定'
            };
            return names[category] || category;
        }

        // 更新設定值
        function updateSetting(key, value) {
            currentSettings[key] = value;
            
            // 如果是顏色設定，同步更新預覽
            if (key.includes('color')) {
                const colorPreview = document.querySelector(`#setting_${key}`).parentElement.querySelector('.color-preview');
                if (colorPreview) {
                    colorPreview.style.backgroundColor = value;
                }
            }
            
            // 如果是布林值，更新標籤
            const checkbox = document.querySelector(`#setting_${key}`);
            if (checkbox && checkbox.type === 'checkbox') {
                const label = document.querySelector(`label[for="setting_${key}"]`);
                if (label) {
                    label.textContent = value ? '已啟用' : '已停用';
                }
            }
        }

        // 更新多選設定
        function updateMultiSelectSetting(key, option, isChecked) {
            if (!Array.isArray(currentSettings[key])) {
                currentSettings[key] = [];
            }
            
            if (isChecked) {
                if (!currentSettings[key].includes(option)) {
                    currentSettings[key].push(option);
                }
            } else {
                currentSettings[key] = currentSettings[key].filter(item => item !== option);
            }
        }

        // 更新時段設定
        function updateTimeSlot(key, index, field, value) {
            if (!Array.isArray(currentSettings[key])) {
                currentSettings[key] = [];
            }
            
            if (!currentSettings[key][index]) {
                currentSettings[key][index] = {};
            }
            
            currentSettings[key][index][field] = value;
        }

        // 新增時段
        function addTimeSlot(key) {
            if (!Array.isArray(currentSettings[key])) {
                currentSettings[key] = [];
            }
            
            currentSettings[key].push({
                start: '09:00',
                end: '12:00',
                label: '新時段'
            });
            
            // 重新渲染設定
            renderSettings();
        }

        // 移除時段
        function removeTimeSlot(key, index) {
            if (Array.isArray(currentSettings[key])) {
                currentSettings[key].splice(index, 1);
                renderSettings();
            }
        }

        // 更新區域選項
        function updateDistrictOptions(key) {
            const citySelect = document.getElementById(`citySelect_${key}`);
            const districtSelect = document.getElementById(`districtSelect_${key}`);
            const selectedCity = citySelect.value;
            
            // 清空區域選項
            districtSelect.innerHTML = '<option value="">選擇區域</option>';
            
            if (selectedCity) {
                // 找到對應的設定
                const categorySetting = Object.values(allCategories).flat().find(s => s.key === key);
                if (categorySetting && categorySetting.areas[selectedCity]) {
                    categorySetting.areas[selectedCity].forEach(district => {
                        districtSelect.innerHTML += `<option value="${district}">${district}</option>`;
                    });
                    districtSelect.disabled = false;
                } else {
                    districtSelect.disabled = true;
                }
            } else {
                districtSelect.disabled = true;
            }
        }

        // 新增區域
        function addDistrict(key) {
            const citySelect = document.getElementById(`citySelect_${key}`);
            const districtSelect = document.getElementById(`districtSelect_${key}`);
            
            const city = citySelect.value;
            const district = districtSelect.value;
            
            if (!city || !district) {
                alert('請選擇縣市和區域');
                return;
            }
            
            // 初始化設定值
            if (!Array.isArray(currentSettings[key])) {
                currentSettings[key] = [];
            }
            
            // 檢查是否已存在
            const exists = currentSettings[key].some(item => 
                item.city === city && item.district === district
            );
            
            if (exists) {
                alert('該區域已經存在');
                return;
            }
            
            // 新增區域
            currentSettings[key].push({ city: city, district: district });
            
            // 重新渲染設定
            renderSettings();
        }

        // 移除區域
        function removeDistrict(key, index) {
            if (Array.isArray(currentSettings[key])) {
                currentSettings[key].splice(index, 1);
                renderSettings();
            }
        }

        // 儲存所有設定
        async function saveAllSettings() {
            try {
                const saveBtn = document.querySelector('.btn-primary');
                saveBtn.classList.add('loading');
                saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 儲存中...';

                const response = await fetch('/api/admin/basic-settings/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ settings: currentSettings })
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('設定儲存成功！', 'success');
                } else {
                    showNotification('儲存失敗: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('儲存錯誤:', error);
                showNotification('儲存時發生錯誤', 'error');
            } finally {
                const saveBtn = document.querySelector('.btn-primary');
                saveBtn.classList.remove('loading');
                saveBtn.innerHTML = '<i class="fas fa-save"></i> 儲存設定';
            }
        }

        // 預覽變更
        function previewChanges() {
            const modal = new bootstrap.Modal(document.getElementById('previewModal'));
            const previewContent = document.getElementById('preview-content');
            
            previewContent.innerHTML = `
                <div class="preview-section">
                    <h6>🎨 色彩預覽</h6>
                    <div class="preview-card">
                        <div style="background: ${currentSettings.primary_color || '#2d5a3d'}; color: white; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;">
                            主要色彩 (${currentSettings.primary_color || '#2d5a3d'})
                        </div>
                        <div style="background: ${currentSettings.accent_color || '#7cb342'}; color: white; padding: 1rem; border-radius: 8px;">
                            強調色彩 (${currentSettings.accent_color || '#7cb342'})
                        </div>
                    </div>
                </div>
                
                <div class="preview-section">
                    <h6>🏪 商店資訊</h6>
                    <div class="preview-card">
                        <h5>${currentSettings.store_name || '誠意鮮蔬'}</h5>
                        <p class="text-muted">${currentSettings.store_slogan || '新鮮 × 健康 × 便利'}</p>
                        <p><i class="fas fa-phone"></i> ${currentSettings.contact_phone || '02-12345678'}</p>
                        <p><i class="fas fa-map-marker-alt"></i> ${currentSettings.contact_address || '地址未設定'}</p>
                    </div>
                </div>
                
                <div class="preview-section">
                    <h6>💰 營業設定</h6>
                    <div class="preview-card">
                        <p>免運門檻: NT$ ${currentSettings.free_shipping_threshold || 300}</p>
                        <p>配送費用: NT$ ${currentSettings.delivery_fee || 50}</p>
                        <p>最低訂購: NT$ ${currentSettings.minimum_order_amount || 100}</p>
                        <p>服務時間: ${currentSettings.service_hours_start || '08:00'} - ${currentSettings.service_hours_end || '20:00'}</p>
                    </div>
                </div>
            `;
            
            modal.show();
        }

        // 重設為預設值
        async function resetToDefaults() {
            if (!confirm('確定要重設所有設定為預設值嗎？此操作無法復原。')) {
                return;
            }

            try {
                const keys = Object.keys(currentSettings);
                const response = await fetch('/api/admin/basic-settings/reset', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ keys })
                });

                const data = await response.json();

                if (data.success) {
                    showNotification('設定已重設為預設值', 'success');
                    loadSettings(); // 重新載入設定
                } else {
                    showNotification('重設失敗: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('重設錯誤:', error);
                showNotification('重設時發生錯誤', 'error');
            }
        }

        // 配送區域管理相關函數
        let deliveryAreas = {};
        let deliveryAreasData = [];

        // 渲染配送區域設定
        async function renderDeliveryAreasSettings() {
            const contentContainer = document.getElementById('settings-content');
            
            // 載入配送區域資料
            await loadDeliveryAreas();
            
            let settingsHtml = `
                <div class="settings-card">
                    <div class="settings-card-header">
                        <h5><i class="fas fa-map-pin me-2"></i>配送區域管理</h5>
                        <small>請勾選您要開放配送的縣市和區域，前台結帳時將只顯示已勾選的區域</small>
                    </div>
                    <div class="p-4">
                        <!-- 統計資訊 -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="alert alert-success">
                                    <h6 class="mb-1"><i class="fas fa-map-pin text-success me-2"></i>已開放區域</h6>
                                    <h4 class="mb-0" id="enabled-count">0</h4>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="alert alert-info">
                                    <h6 class="mb-1"><i class="fas fa-truck text-info me-2"></i>配送覆蓋率</h6>
                                    <h4 class="mb-0" id="coverage-percentage">0%</h4>
                                </div>
                            </div>
                        </div>

                        <!-- 配送區域選擇 -->
                        <div class="delivery-areas-grid">
                            ${generateDeliveryAreasHtml()}
                        </div>

                        <!-- 儲存按鈕 -->
                        <div class="text-end mt-4">
                            <button type="button" class="btn btn-success btn-lg" onclick="saveDeliveryAreas()">
                                <i class="fas fa-save me-2"></i>儲存配送區域設定
                            </button>
                        </div>
                    </div>
                </div>
            `;

            contentContainer.innerHTML = settingsHtml;
            updateDeliveryAreasStats();
        }

        // 載入配送區域資料
        async function loadDeliveryAreas() {
            try {
                const response = await fetch('/api/admin/delivery-areas');
                const data = await response.json();
                
                if (data.success) {
                    deliveryAreasData = data.areas || [];
                    
                    // 建立區域對應表
                    deliveryAreas = {};
                    deliveryAreasData.forEach(area => {
                        const key = `${area.city}-${area.district}`;
                        deliveryAreas[key] = area.enabled;
                    });
                }
            } catch (error) {
                console.error('載入配送區域失敗:', error);
            }
        }

        // 生成配送區域HTML
        function generateDeliveryAreasHtml() {
            const cities = {
                '台北市': ['中正區', '大同區', '中山區', '松山區', '大安區', '萬華區', '信義區', '士林區', '北投區', '內湖區', '南港區', '文山區'],
                '新北市': ['板橋區', '三重區', '中和區', '永和區', '新莊區', '新店區', '樹林區', '鶯歌區', '三峽區', '淡水區', '汐止區', '瑞芳區', '土城區', '蘆洲區', '五股區', '泰山區', '林口區', '深坑區', '石碇區', '坪林區', '三芝區', '石門區', '八里區', '平溪區', '雙溪區', '貢寮區', '金山區', '萬里區', '烏來區'],
                '桃園市': ['桃園區', '中壢區', '大溪區', '楊梅區', '蘆竹區', '大園區', '龜山區', '八德區', '龍潭區', '平鎮區', '新屋區', '觀音區', '復興區']
            };

            let html = '';
            
            Object.keys(cities).forEach(city => {
                const districts = cities[city];
                const cityId = city.replace('市', '').replace('縣', '');
                
                html += `
                    <div class="city-card mb-4">
                        <div class="city-header" onclick="toggleCity('${cityId}')">
                            <div class="d-flex align-items-center">
                                <input type="checkbox" class="form-check-input me-2" 
                                       id="city-${cityId}" 
                                       onchange="toggleCityAll('${city}')">
                                <label for="city-${cityId}" class="city-name h6 mb-0">${city}</label>
                                <small class="text-muted ms-2">(點擊展開區域)</small>
                            </div>
                            <i class="fas fa-chevron-down toggle-icon" id="icon-${cityId}"></i>
                        </div>
                        <div class="districts-grid collapse" id="districts-${cityId}">
                `;
                
                districts.forEach(district => {
                    const key = `${city}-${district}`;
                    const isChecked = deliveryAreas[key] ? 'checked' : '';
                    html += `
                        <div class="form-check district-item">
                            <input class="form-check-input district-checkbox" 
                                   type="checkbox" 
                                   value="${key}" 
                                   id="district-${key}" 
                                   ${isChecked}
                                   onchange="updateDistrictSelection('${city}')">
                            <label class="form-check-label" for="district-${key}">
                                ${district}
                            </label>
                        </div>
                    `;
                });
                
                html += `
                        </div>
                    </div>
                `;
            });
            
            return html;
        }

        // 切換城市展開/收合
        function toggleCity(cityId) {
            const districts = document.getElementById(`districts-${cityId}`);
            const icon = document.getElementById(`icon-${cityId}`);
            
            if (districts.classList.contains('show')) {
                districts.classList.remove('show');
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            } else {
                districts.classList.add('show');
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            }
        }

        // 切換整個城市的所有區域
        function toggleCityAll(city) {
            const cityCheckbox = document.getElementById(`city-${city.replace('市', '').replace('縣', '')}`);
            const districtCheckboxes = document.querySelectorAll(`input[value^="${city}-"]`);
            
            districtCheckboxes.forEach(checkbox => {
                checkbox.checked = cityCheckbox.checked;
            });
            
            updateDeliveryAreasStats();
        }

        // 更新區域選擇
        function updateDistrictSelection(city) {
            const cityId = city.replace('市', '').replace('縣', '');
            const cityCheckbox = document.getElementById(`city-${cityId}`);
            const districtCheckboxes = document.querySelectorAll(`input[value^="${city}-"]`);
            
            const checkedCount = Array.from(districtCheckboxes).filter(cb => cb.checked).length;
            const totalCount = districtCheckboxes.length;
            
            if (checkedCount === 0) {
                cityCheckbox.checked = false;
                cityCheckbox.indeterminate = false;
            } else if (checkedCount === totalCount) {
                cityCheckbox.checked = true;
                cityCheckbox.indeterminate = false;
            } else {
                cityCheckbox.checked = false;
                cityCheckbox.indeterminate = true;
            }
            
            updateDeliveryAreasStats();
        }

        // 更新統計資訊
        function updateDeliveryAreasStats() {
            const checkedDistricts = document.querySelectorAll('.district-checkbox:checked');
            const totalDistricts = document.querySelectorAll('.district-checkbox');
            
            const enabledCount = checkedDistricts.length;
            const totalCount = totalDistricts.length;
            const percentage = totalCount > 0 ? Math.round((enabledCount / totalCount) * 100) : 0;
            
            document.getElementById('enabled-count').textContent = enabledCount;
            document.getElementById('coverage-percentage').textContent = percentage + '%';
        }

        // 儲存配送區域設定
        async function saveDeliveryAreas() {
            const checkedDistricts = document.querySelectorAll('.district-checkbox:checked');
            
            if (checkedDistricts.length === 0) {
                alert('請至少選擇一個配送區域');
                return;
            }
            
            const areas = Array.from(checkedDistricts).map(checkbox => {
                const [city, district] = checkbox.value.split('-');
                return { city, district, enabled: true };
            });
            
            try {
                const response = await fetch('/api/admin/delivery-areas', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ areas })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(`✅ 配送區域設定已儲存！\\n已開放 ${new Set(areas.map(a => a.city)).size} 個縣市，共 ${areas.length} 個區域`);
                } else {
                    alert(`儲存失敗: ${result.message}`);
                }
            } catch (error) {
                console.error('儲存配送區域失敗:', error);
                alert('儲存失敗，請稍後再試');
            }
        }

        // 渲染系統監控設定
        async function renderSystemMonitorSettings() {
            const contentContainer = document.getElementById('settings-content');
            
            contentContainer.innerHTML = `
                <div class="settings-card">
                    <div class="settings-card-header">
                        <h5><i class="fas fa-chart-line me-2"></i>系統監控面板</h5>
                    </div>
                    <div class="card-body">
                        <!-- 監控按鈕區域 -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="d-flex gap-2 mb-3">
                                    <button onclick="refreshMonitorData()" class="btn btn-success">
                                        <i class="fas fa-sync-alt me-1"></i>重新整理
                                    </button>
                                    <span class="text-muted" id="lastMonitorUpdate">最後更新：載入中...</span>
                                </div>
                            </div>
                        </div>

                        <!-- 系統狀態總覽 -->
                        <div class="row mb-4">
                            <div class="col-md-3 mb-3">
                                <div class="card text-center h-100">
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <i class="fas fa-heartbeat text-success" style="font-size: 2rem;" id="healthIcon"></i>
                                        </div>
                                        <h6 class="card-title">系統狀態</h6>
                                        <p class="card-text fw-bold" id="healthStatus">載入中...</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="card text-center h-100">
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <i class="fas fa-clock text-primary" style="font-size: 2rem;"></i>
                                        </div>
                                        <h6 class="card-title">運行時間</h6>
                                        <p class="card-text fw-bold" id="uptime">載入中...</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="card text-center h-100">
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <i class="fas fa-chart-bar text-info" style="font-size: 2rem;"></i>
                                        </div>
                                        <h6 class="card-title">總請求數</h6>
                                        <p class="card-text fw-bold" id="totalRequests">載入中...</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 mb-3">
                                <div class="card text-center h-100">
                                    <div class="card-body">
                                        <div class="mb-2">
                                            <i class="fas fa-tachometer-alt text-warning" style="font-size: 2rem;"></i>
                                        </div>
                                        <h6 class="card-title">平均響應時間</h6>
                                        <p class="card-text fw-bold" id="avgResponse">載入中...</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 詳細資訊 -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0"><i class="fas fa-memory me-2"></i>記憶體資訊</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row text-center">
                                            <div class="col-4">
                                                <p class="mb-1 text-muted">已使用</p>
                                                <p class="fw-bold" id="currentMemory">載入中...</p>
                                            </div>
                                            <div class="col-4">
                                                <p class="mb-1 text-muted">總量</p>
                                                <p class="fw-bold" id="totalMemory">載入中...</p>
                                            </div>
                                            <div class="col-4">
                                                <p class="mb-1 text-muted">RSS</p>
                                                <p class="fw-bold" id="rssMemory">載入中...</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>錯誤統計</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row text-center">
                                            <div class="col-6">
                                                <p class="mb-1 text-muted">錯誤率</p>
                                                <p class="fw-bold text-danger" id="errorRate">載入中...</p>
                                            </div>
                                            <div class="col-6">
                                                <p class="mb-1 text-muted">總錯誤數</p>
                                                <p class="fw-bold text-danger" id="totalErrors">載入中...</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- 系統狀態詳情 -->
                        <div class="row mt-3">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0"><i class="fas fa-list me-2"></i>系統狀態詳情</h6>
                                    </div>
                                    <div class="card-body" id="systemIssues">
                                        <!-- 動態載入 -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // 載入監控數據
            await loadMonitoringData();
        }

        // 載入監控數據
        async function loadMonitoringData() {
            try {
                const response = await fetch('/api/performance');
                const data = await response.json();
                
                if (data.success) {
                    updateMonitoringUI(data.performance);
                    document.getElementById('lastMonitorUpdate').textContent = `最後更新：${new Date().toLocaleString()}`;
                }
            } catch (error) {
                console.error('載入監控數據失敗:', error);
                showNotification('無法載入監控數據', 'error');
            }
        }

        // 更新監控UI
        function updateMonitoringUI(performance) {
            // 系統健康狀態
            const healthStatus = performance.healthStatus.status;
            const healthElement = document.getElementById('healthStatus');
            const healthIcon = document.getElementById('healthIcon');
            
            if (healthElement) {
                healthElement.textContent = healthStatus === 'healthy' ? '正常' : 
                                           healthStatus === 'warning' ? '警告' : '嚴重';
                healthElement.className = `card-text fw-bold text-${healthStatus === 'healthy' ? 'success' : 
                                                                    healthStatus === 'warning' ? 'warning' : 'danger'}`;
                
                healthIcon.className = `fas fa-heartbeat text-${healthStatus === 'healthy' ? 'success' : 
                                                               healthStatus === 'warning' ? 'warning' : 'danger'}`;
            }
            
            // 基本指標
            if (document.getElementById('uptime')) {
                document.getElementById('uptime').textContent = formatUptime(performance.uptime);
                document.getElementById('totalRequests').textContent = performance.totalRequests.toLocaleString();
                document.getElementById('avgResponse').textContent = performance.averageResponseTime;
                document.getElementById('errorRate').textContent = performance.errorRate;
                document.getElementById('totalErrors').textContent = performance.totalErrors.toLocaleString();
            }
            
            // 記憶體資訊
            if (performance.currentMemory && document.getElementById('currentMemory')) {
                document.getElementById('currentMemory').textContent = performance.currentMemory.heapUsed;
                document.getElementById('totalMemory').textContent = performance.currentMemory.heapTotal;
                document.getElementById('rssMemory').textContent = performance.currentMemory.rss;
            }
            
            // 系統問題
            const issuesContainer = document.getElementById('systemIssues');
            if (issuesContainer) {
                issuesContainer.innerHTML = '';
                performance.healthStatus.issues.forEach(issue => {
                    const issueElement = document.createElement('div');
                    issueElement.className = `alert ${issue.includes('正常') ? 'alert-success' : 'alert-warning'} mb-2`;
                    issueElement.innerHTML = `<i class="fas fa-info-circle me-2"></i>${issue}`;
                    issuesContainer.appendChild(issueElement);
                });
            }
        }

        // 重新整理監控數據
        function refreshMonitorData() {
            loadMonitoringData();
        }

        // 格式化運行時間
        function formatUptime(seconds) {
            const days = Math.floor(seconds / 86400);
            const hours = Math.floor((seconds % 86400) / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            
            if (days > 0) return `${days}天 ${hours}小時`;
            if (hours > 0) return `${hours}小時 ${minutes}分鐘`;
            return `${minutes}分鐘`;
        }

        // 顯示通知
        function showNotification(message, type = 'info') {
            const toast = document.getElementById('notification-toast');
            const toastBody = toast.querySelector('.toast-body');
            const toastHeader = toast.querySelector('.toast-header');

            // 設定類型樣式
            toast.className = `toast ${type === 'error' ? 'bg-danger text-white' : type === 'success' ? 'bg-success text-white' : ''}`;
            
            toastBody.textContent = message;
            
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
        }
    </script>
</body>
</html>