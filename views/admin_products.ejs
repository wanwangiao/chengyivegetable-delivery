<% 
currentPage = 'products';
pageTitle = '商品管理';
breadcrumb = [
    {name: '首頁', url: '/admin'},
    {name: '商品管理'}
];

customCSS = `
<style>
    .products-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        border-radius: 12px;
    }
    
    .products-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #27ae60;
        text-align: center;
    }
    
    .stat-card.fixed-price { border-left-color: #27ae60; }
    .stat-card.priced-item { border-left-color: #e67e22; }
    
    .stat-number {
        font-size: 2em;
        font-weight: bold;
        color: #2c3e50;
    }
    
    .stat-label {
        color: #7f8c8d;
        margin-top: 5px;
    }
    
    .products-table {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .table-header {
        background: linear-gradient(135deg, #34495e, #2c3e50);
        color: white;
        padding: 15px 20px;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .products-table table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .products-table th, .products-table td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #ecf0f1;
    }
    
    .products-table th {
        background: #34495e;
        color: white;
        font-weight: 600;
    }
    
    .products-table tr:hover {
        background: #f8f9fa;
    }
    
    .product-name {
        font-weight: bold;
        color: #2c3e50;
    }
    
    .product-type {
        padding: 3px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        color: white;
    }
    
    .type-fixed { background: #27ae60; }
    .type-priced { background: #e67e22; }
    
    .form-input {
        width: 100px;
        padding: 5px 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 0.9em;
    }
    
    .form-input.wide {
        width: 150px;
    }
    
    .update-btn {
        background: #3498db;
        color: white;
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 0.9em;
        transition: all 0.3s ease;
    }
    
    .update-btn:hover {
        background: #2980b9;
        transform: translateY(-1px);
    }
    
    .add-product-btn {
        background: #27ae60;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold;
    }
    
    .add-product-btn:hover {
        background: #219a52;
    }
    
    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #7f8c8d;
    }
    
    .empty-icon {
        font-size: 4em;
        margin-bottom: 20px;
    }
    
    .loading {
        text-align: center;
        padding: 40px;
        color: #7f8c8d;
    }
    
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 8px;
        border: 1px solid transparent;
    }
    
    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }
    
    .alert-error {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
    
    .btn-sm {
        padding: 4px 8px;
        font-size: 0.8rem;
        border-radius: 4px;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        min-width: 70px;
    }
    
    .btn-success {
        background-color: #28a745;
        color: white;
    }
    
    .btn-success:hover {
        background-color: #218838;
        transform: translateY(-1px);
    }
    
    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }
    
    .btn-secondary:hover {
        background-color: #5a6268;
        transform: translateY(-1px);
    }
    
    .badge {
        font-size: 0.7rem;
        padding: 0.25em 0.4em;
    }
    
    .bg-warning {
        background-color: #ffc107 !important;
        color: #212529;
    }
    
    @media (max-width: 768px) {
        .products-table table {
            font-size: 0.9em;
        }
        
        .products-table th, .products-table td {
            padding: 10px 8px;
        }
        
        .form-input {
            width: 80px;
        }
        
        .form-input.wide {
            width: 120px;
        }
        
        .products-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }
        
        .table-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }
    }
</style>
`;

customJS = `
<script>
let allProducts = [];

// 頁面載入時初始化
document.addEventListener('DOMContentLoaded', function() {
    loadProducts();
});

// 載入所有商品
async function loadProducts() {
    try {
        showLoading(true);
        const response = await fetch('/api/admin/products');
        const data = await response.json();
        
        if (data.success) {
            allProducts = data.products || [];
            updateProductsDisplay();
            updateStatistics();
        } else {
            showError('載入商品失敗：' + (data.message || '未知錯誤'));
        }
    } catch (error) {
        console.error('載入商品錯誤:', error);
        showError('網路連線錯誤，請稍後再試');
    } finally {
        showLoading(false);
    }
}

// 更新商品顯示
function updateProductsDisplay() {
    const container = document.getElementById('productsContainer');
    
    if (allProducts.length === 0) {
        container.innerHTML = \`
            <div class="empty-state">
                <div class="empty-icon">🛍️</div>
                <h2>目前沒有商品</h2>
                <p>請先新增一些商品到系統中</p>
                <br>
                <a href="/admin/products/new" class="add-product-btn">➕ 新增第一個商品</a>
            </div>
        \`;
        return;
    }
    
    const statsHTML = \`
        <div class="products-stats">
            <div class="stat-card fixed-price">
                <div class="stat-number">\${allProducts.filter(p => !p.is_priced_item).length}</div>
                <div class="stat-label">固定價格商品</div>
            </div>
            <div class="stat-card priced-item">
                <div class="stat-number">\${allProducts.filter(p => p.is_priced_item).length}</div>
                <div class="stat-label">計價商品</div>
            </div>
        </div>
    \`;
    
    const tableHTML = \`
        <div class="products-table">
            <div class="table-header">
                <span>📅 商品列表 - 共 \${allProducts.length} 項商品</span>
                <a href="/admin/products/new" class="add-product-btn">➕ 新增商品</a>
            </div>
            
            <table>
                <thead>
                    <tr>
                        <th>狀態</th>
                        <th>商品名稱</th>
                        <th>商品類型</th>
                        <th>價格設定</th>
                        <th>稱重單價</th>
                        <th>單位說明</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    \${allProducts.map(product => \`
                        <tr \${!product.is_available ? 'style="opacity: 0.6; background-color: #f8f8f8;"' : ''}>
                            <td style="text-align: center;">
                                <button type="button" 
                                        onclick="toggleProductAvailability(\${product.id})" 
                                        class="btn btn-sm \${product.is_available ? 'btn-success' : 'btn-secondary'}"
                                        title="\${product.is_available ? '點擊下架' : '點擊上架'}">
                                    \${product.is_available ? '🟢 上架' : '🔴 下架'}
                                </button>
                            </td>
                            <td class="product-name">
                                \${product.name}
                                \${!product.is_available ? '<span class="badge bg-warning ms-2">已下架</span>' : ''}
                            </td>
                            <td>
                                <span class="product-type \${product.is_priced_item ? 'type-priced' : 'type-fixed'}">
                                    \${product.is_priced_item ? '計價商品' : '固定價格'}
                                </span>
                            </td>
                            <td>
                                \${product.is_priced_item 
                                    ? '<span style="color: #95a5a6;">依重量計價</span>'
                                    : \`$<input type="number" step="0.01" value="\${product.price || ''}" class="form-input" onchange="updateProductField(\${product.id}, 'price', this.value)" required>\`
                                }
                            </td>
                            <td>
                                \${product.is_priced_item 
                                    ? \`$<input type="number" step="0.01" value="\${product.weight_price_per_unit || ''}" class="form-input" onchange="updateProductField(\${product.id}, 'weight_price_per_unit', this.value)" placeholder="每斤單價">\`
                                    : '<span style="color: #bdc3c7;">-</span>'
                                }
                            </td>
                            <td>
                                <input type="text" value="\${product.unit_hint || ''}" class="form-input wide" onchange="updateProductField(\${product.id}, 'unit_hint', this.value)" placeholder="例：每公斤">
                            </td>
                            <td>
                                <button type="button" onclick="saveProduct(\${product.id})" class="update-btn">💾 更新</button>
                                <a href="/admin/products/\${product.id}/edit" class="update-btn" style="background: #e67e22; text-decoration: none; margin-left: 5px;">✏️ 編輯</a>
                            </td>
                        </tr>
                    \`).join('')}
                </tbody>
            </table>
        </div>
    \`;
    
    container.innerHTML = statsHTML + tableHTML;
}

// 更新統計資訊
function updateStatistics() {
    // 統計資訊在 updateProductsDisplay 中一併處理
}

// 更新商品欄位
function updateProductField(productId, field, value) {
    const product = allProducts.find(p => p.id === productId);
    if (product) {
        product[field] = value;
    }
}

// 儲存商品
async function saveProduct(productId) {
    const product = allProducts.find(p => p.id === productId);
    if (!product) {
        showError('找不到商品資料');
        return;
    }
    
    try {
        const updateData = {
            price: product.is_priced_item ? null : parseFloat(product.price) || 0,
            weight_price_per_unit: product.is_priced_item ? parseFloat(product.weight_price_per_unit) || 0 : null,
            unit_hint: product.unit_hint || ''
        };
        
        const response = await fetch(\`/api/admin/products/\${productId}\`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess('商品更新成功');
            loadProducts(); // 重新載入資料
        } else {
            showError('更新失敗：' + (data.message || '未知錯誤'));
        }
    } catch (error) {
        console.error('更新商品錯誤:', error);
        showError('網路連線錯誤，請稍後再試');
    }
}

// 切換商品上下架狀態
async function toggleProductAvailability(productId) {
    try {
        const response = await fetch(\`/api/admin/products/\${productId}/toggle-availability\`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        const data = await response.json();
        
        if (data.success) {
            showSuccess(data.message);
            loadProducts(); // 重新載入商品列表以反映狀態變化
        } else {
            showError('狀態切換失敗：' + (data.message || '未知錯誤'));
        }
    } catch (error) {
        console.error('切換商品狀態錯誤:', error);
        showError('網路連線錯誤，請稍後再試');
    }
}

// 顯示載入狀態
function showLoading(show) {
    const container = document.getElementById('productsContainer');
    if (show) {
        container.innerHTML = \`
            <div class="loading">
                <div style="font-size: 2em; margin-bottom: 15px;">⏳</div>
                <div>載入中...</div>
            </div>
        \`;
    }
}

// 顯示成功訊息
function showSuccess(message) {
    showAlert(message, 'success');
}

// 顯示錯誤訊息
function showError(message) {
    showAlert(message, 'error');
}

// 顯示提示訊息
function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = \`alert alert-\${type}\`;
    alertDiv.textContent = message;
    
    const container = document.getElementById('productsContainer');
    container.insertBefore(alertDiv, container.firstChild);
    
    setTimeout(() => {
        alertDiv.remove();
    }, 5000);
}
</script>
`;
%>

<% layout('admin_layout') -%>

<div class="products-header">
    <div>
        <h1>🥬 商品管理系統</h1>
        <p>管理所有商品資訊、價格設定</p>
    </div>
    <div style="text-align: right;">
        <div style="font-size: 2em;">🛍️</div>
        <div id="productCount">載入中...</div>
    </div>
</div>

<div id="productsContainer">
    <div class="loading">
        <div style="font-size: 2em; margin-bottom: 15px;">⏳</div>
        <div>載入中...</div>
    </div>
</div>