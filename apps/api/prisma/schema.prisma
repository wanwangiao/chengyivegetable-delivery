generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                 String              @id @default(uuid())
  contactName        String
  contactPhone       String
  address            String
  latitude           Float?
  longitude          Float?
  geocodedAt         DateTime?
  status             String              @default("pending")
  subtotal           Decimal             @default(0)
  deliveryFee        Decimal             @default(0)
  totalAmount        Decimal             @default(0)
  paymentMethod      String
  notes              String?
  driverId           String?
  driverSequence     Int?
  deliveryDate       DateTime?
  isPreOrder         Boolean             @default(false)
  priceAlertSent     Boolean             @default(false)
  priceConfirmed     Boolean?
  priceAlertSentAt   DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  items              OrderItem[]
  statusHistory      OrderStatusHistory[]
  deliveryProofs     DeliveryProof[]
  priceChangeAlerts  PriceChangeAlert[]
  driver             Driver?             @relation(fields: [driverId], references: [id])
}

model OrderItem {
  id         String  @id @default(uuid())
  orderId    String
  productId  String
  name       String
  quantity   Float
  unit       String
  unitPrice  Decimal
  lineTotal  Decimal

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderStatusHistory {
  id        String   @id @default(uuid())
  orderId   String
  status    String
  note      String?
  changedAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Product {
  id                        String   @id @default(uuid())
  name                      String
  description               String?
  category                  String
  unit                      String
  unitHint                  String?
  price                     Decimal? @default(0)
  nextDayPrice              Decimal?
  stock                     Float   @default(0)
  isAvailable               Boolean @default(true)
  isPricedItem              Boolean @default(false)
  weightPricePerUnit        Decimal?
  nextDayWeightPricePerUnit Decimal?
  sortOrder                 Int     @default(0)
  imageUrl                  String?
  imageKey                  String?
  imageUploadedAt           DateTime?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  options                   ProductOption[]
}

model ProductOption {
  id            String   @id @default(uuid())
  productId     String
  name          String
  price         Decimal?
  groupName     String?  // 選項組名稱 (e.g., "處理方式", "切割方式")
  isRequired    Boolean @default(false)  // 該組是否為必選
  selectionType String  @default("single")  // "single" 單選 or "multiple" 多選
  sortOrder     Int     @default(0)  // 選項排序
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model DeliveryArea {
  id        String   @id @default(uuid())
  name      String
  polygon   Json
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryConfig {
  id                  String   @id @default("delivery-config")
  pickupName          String
  pickupAddress       String
  pickupLat           Float
  pickupLng           Float
  recommendedBatchMin Int      @default(5)
  recommendedBatchMax Int      @default(8)
  autoBatchingEnabled Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Driver {
  id                 String   @id
  user               User     @relation(fields: [id], references: [id], onDelete: Cascade)
  name               String
  phone              String
  status             String   @default("offline")
  currentLat         Float?
  currentLng         Float?
  lastLocationUpdate DateTime?
  orders             Order[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model LineUser {
  id        String   @id @default(uuid())
  lineUserId String  @unique
  displayName String
  pictureUrl  String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  driver    Driver?
}

enum UserRole {
  ADMIN
  DRIVER
  CUSTOMER
}

model BusinessHours {
  id                    String        @id @default(uuid())
  regularClosedDays     Int[]         @default([])
  orderCutoffTime       String        @default("10:00")
  preorderStartTime     String        @default("14:00")
  currentOrderStartTime String        @default("07:30")
  currentDayMessage     String?
  nextDayMessage        String?
  preparationMessage    String?
  beforeOpenMessage     String?
  closedDayMessage      String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  specialDates          SpecialDate[]
}

model SpecialDate {
  id              String        @id @default(uuid())
  date            DateTime
  type            DateType
  reason          String?
  businessHoursId String
  businessHours   BusinessHours @relation(fields: [businessHoursId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([businessHoursId])
  @@index([date])
}

enum DateType {
  OPEN
  CLOSED
}

model DeliveryProof {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driverId   String?
  photoUrl   String
  photoKey   String?
  note       String?
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())
  uploadedAt DateTime @default(now())

  @@index([orderId])
}

model SystemConfig {
  id                       String   @id @default("system-config")
  storeLogo                String?
  storeName                String   @default("程翊生鮮蔬果")
  storePhone               String?
  currentOrderStartTime    String   @default("07:30")
  currentOrderEndTime      String   @default("10:00")
  preOrderStartTime        String   @default("14:00")
  preOrderEndTime          String   @default("23:59")
  priceChangeThreshold     Float    @default(20)
  priceConfirmTimeout      Int      @default(86400)
  lineNotificationEnabled  Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model PriceChangeAlert {
  id               String   @id @default(uuid())
  orderId          String
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  oldPrice         Decimal
  newPrice         Decimal
  changes          Json
  priceChanges     Json?
  sentAt           DateTime @default(now())
  confirmedAt      DateTime?
  autoConfirmedAt  DateTime?
  autoAcceptedAt   DateTime?
  customerResponse String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([orderId])
}
